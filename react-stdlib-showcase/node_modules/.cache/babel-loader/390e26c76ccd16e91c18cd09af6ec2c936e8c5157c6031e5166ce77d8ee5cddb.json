{"ast":null,"code":"var _jsxFileName = \"c:\\\\Academics\\\\Programming\\\\stdlib-showcase\\\\react-stdlib-showcase\\\\src\\\\components\\\\cards\\\\DateCard.tsx\";\nimport React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateCard = () => {\n  const dateFunctions = [{\n    name: \"new Date()\",\n    description: \"Creates a new date object with the current date and time.\",\n    example: `const now = new Date();\nconsole.log(now);\n// Result: Current date and time`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n    tryIt: input => {\n      try {\n        const date = input ? new Date(input) : new Date();\n        return date.toString();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }, {\n    name: \"toLocaleDateString()\",\n    description: \"Returns a date as a string using locale conventions.\",\n    example: `const date = new Date();\nconst local = date.toLocaleDateString();\n// Result: \"4/8/2025\"`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08)\",\n    tryIt: input => {\n      try {\n        const date = new Date(input);\n        return date.toLocaleDateString();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }, {\n    name: \"getTime()\",\n    description: \"Returns the number of milliseconds since January 1, 1970.\",\n    example: `const date = new Date();\nconst timestamp = date.getTime();\n// Result: milliseconds since epoch`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n    tryIt: input => {\n      try {\n        const date = input ? new Date(input) : new Date();\n        return date.getTime();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(FunctionCard, {\n    title: \"Date Functions\",\n    functions: dateFunctions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_c = DateCard;\nexport default DateCard;\nvar _c;\n$RefreshReg$(_c, \"DateCard\");","map":{"version":3,"names":["React","FunctionCard","jsxDEV","_jsxDEV","DateCard","dateFunctions","name","description","example","inputPlaceholder","tryIt","input","date","Date","toString","e","toLocaleDateString","getTime","title","functions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Academics/Programming/stdlib-showcase/react-stdlib-showcase/src/components/cards/DateCard.tsx"],"sourcesContent":["import React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\n\nconst DateCard: React.FC = () => {\n  const dateFunctions = [\n    {\n      name: \"new Date()\",\n      description: \"Creates a new date object with the current date and time.\",\n      example: `const now = new Date();\nconsole.log(now);\n// Result: Current date and time`,\n      inputPlaceholder:\n        \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n      tryIt: (input: string) => {\n        try {\n          const date = input ? new Date(input) : new Date();\n          return date.toString();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n    {\n      name: \"toLocaleDateString()\",\n      description: \"Returns a date as a string using locale conventions.\",\n      example: `const date = new Date();\nconst local = date.toLocaleDateString();\n// Result: \"4/8/2025\"`,\n      inputPlaceholder: \"Enter date string (e.g., 2025-04-08)\",\n      tryIt: (input: string) => {\n        try {\n          const date = new Date(input);\n          return date.toLocaleDateString();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n    {\n      name: \"getTime()\",\n      description: \"Returns the number of milliseconds since January 1, 1970.\",\n      example: `const date = new Date();\nconst timestamp = date.getTime();\n// Result: milliseconds since epoch`,\n      inputPlaceholder:\n        \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n      tryIt: (input: string) => {\n        try {\n          const date = input ? new Date(input) : new Date();\n          return date.getTime();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n  ];\n\n  return <FunctionCard title=\"Date Functions\" functions={dateFunctions} />;\n};\n\nexport default DateCard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMC,aAAa,GAAG,CACpB;IACEC,IAAI,EAAE,YAAY;IAClBC,WAAW,EAAE,2DAA2D;IACxEC,OAAO,EAAE;AACf;AACA,iCAAiC;IAC3BC,gBAAgB,EACd,sEAAsE;IACxEC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAGD,KAAK,GAAG,IAAIE,IAAI,CAACF,KAAK,CAAC,GAAG,IAAIE,IAAI,CAAC,CAAC;QACjD,OAAOD,IAAI,CAACE,QAAQ,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,sBAAsB;IAC5BC,WAAW,EAAE,sDAAsD;IACnEC,OAAO,EAAE;AACf;AACA,sBAAsB;IAChBC,gBAAgB,EAAE,sCAAsC;IACxDC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;QAC5B,OAAOC,IAAI,CAACI,kBAAkB,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOD,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE,2DAA2D;IACxEC,OAAO,EAAE;AACf;AACA,oCAAoC;IAC9BC,gBAAgB,EACd,sEAAsE;IACxEC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAGD,KAAK,GAAG,IAAIE,IAAI,CAACF,KAAK,CAAC,GAAG,IAAIE,IAAI,CAAC,CAAC;QACjD,OAAOD,IAAI,CAACK,OAAO,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOF,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,CACF;EAED,oBAAOZ,OAAA,CAACF,YAAY;IAACiB,KAAK,EAAC,gBAAgB;IAACC,SAAS,EAAEd;EAAc;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAACC,EAAA,GAvDIpB,QAAkB;AAyDxB,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}