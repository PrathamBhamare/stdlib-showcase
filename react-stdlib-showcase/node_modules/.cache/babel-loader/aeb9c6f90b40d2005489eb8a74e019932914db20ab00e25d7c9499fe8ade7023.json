{"ast":null,"code":"var _jsxFileName = \"c:\\\\Academics\\\\Programming\\\\stdlib-showcase\\\\react-stdlib-showcase\\\\src\\\\components\\\\cards\\\\ArrayCard.tsx\";\nimport React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArrayCard = () => {\n  const arrayFunctions = [{\n    name: \"map()\",\n    description: \"Creates a new array with the results of calling a function for every array element.\",\n    example: `const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\n// Result: [2, 4, 6, 8]`,\n    inputPlaceholder: \"Enter input array (e.g., 1,2,3,4)\",\n    tryIt: input => {\n      try {\n        const numbers = input.split(\",\").map(Number);\n        return numbers.map(num => num * 2);\n      } catch (e) {\n        return \"Please enter numbers separated by commas (e.g., 1,2,3,4)\";\n      }\n    }\n  }, {\n    name: \"filter()\",\n    description: \"Creates a new array with elements that pass a test.\",\n    example: `const numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\n// Result: [2, 4, 6]`,\n    tryIt: input => {\n      try {\n        const numbers = input.split(\",\").map(Number);\n        return numbers.filter(num => num % 2 === 0);\n      } catch (e) {\n        return \"Please enter numbers separated by commas (e.g., 1,2,3,4,5,6)\";\n      }\n    }\n  }, {\n    name: \"reduce()\",\n    description: \"Reduces an array to a single value (from left-to-right).\",\n    example: `const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\n// Result: 10`,\n    tryIt: input => {\n      try {\n        const numbers = input.split(\",\").map(Number);\n        return numbers.reduce((acc, curr) => acc + curr, 0);\n      } catch (e) {\n        return \"Please enter numbers separated by commas (e.g., 1,2,3,4)\";\n      }\n    }\n  }, {\n    name: \"flatMap() with Nested Arrays\",\n    description: \"Maps and flattens nested arrays in a single operation.\",\n    example: `const arr = [[1, 2], [3, 4], [5, 6]];\nconst result = arr.flatMap(subArr => subArr.map(x => x * 2));\n// Result: [2, 4, 6, 8, 10, 12]`,\n    inputPlaceholder: \"Enter nested arrays (e.g., 1,2;3,4;5,6)\",\n    tryIt: input => {\n      try {\n        const nestedArrays = input.split(\";\").map(sub => sub.split(\",\").map(Number));\n        return nestedArrays.flatMap(subArr => subArr.map(x => x * 2));\n      } catch (e) {\n        return \"Please enter numbers in format: 1,2;3,4;5,6\";\n      }\n    }\n  }, {\n    name: \"slice() with Negative Indices\",\n    description: \"Extracts array portions using negative indices for end-based selection.\",\n    example: `const arr = [1, 2, 3, 4, 5];\nconst last3 = arr.slice(-3);\n// Result: [3, 4, 5]`,\n    inputPlaceholder: \"Enter array and start index (e.g., 1,2,3,4,5;-3)\",\n    tryIt: input => {\n      try {\n        const [arrStr, indexStr] = input.split(\";\");\n        const arr = arrStr.split(\",\").map(Number);\n        const index = parseInt(indexStr);\n        return arr.slice(index);\n      } catch (e) {\n        return \"Please enter array and index: 1,2,3,4,5;-3\";\n      }\n    }\n  }, {\n    name: \"Advanced Sort\",\n    description: \"Sorts arrays with custom comparison function for complex objects.\",\n    example: `const items = [{name: 'A', value: 2}, {name: 'B', value: 1}];\nitems.sort((a, b) => a.value - b.value);\n// Result: [{name: 'B', value: 1}, {name: 'A', value: 2}]`,\n    inputPlaceholder: \"Enter name,value pairs (e.g., A,2;B,1;C,3)\",\n    tryIt: input => {\n      try {\n        const items = input.split(\";\").map(item => {\n          const [name, value] = item.split(\",\");\n          return {\n            name,\n            value: parseInt(value)\n          };\n        });\n        return items.sort((a, b) => a.value - b.value);\n      } catch (e) {\n        return \"Please enter items as: A,2;B,1;C,3\";\n      }\n    }\n  }, {\n    name: \"Group By with reduce()\",\n    description: \"Groups array elements by a key using reduce.\",\n    example: `const items = [\n  {category: 'A', value: 10},\n  {category: 'B', value: 20},\n  {category: 'A', value: 30}\n];\nconst grouped = items.reduce((acc, item) => {\n  acc[item.category] = (acc[item.category] || 0) + item.value;\n  return acc;\n}, {});\n// Result: { A: 40, B: 20 }`,\n    inputPlaceholder: \"Enter category,value pairs (e.g., A,10;B,20;A,30)\",\n    tryIt: input => {\n      try {\n        const items = input.split(\";\").map(item => {\n          const [category, value] = item.split(\",\");\n          return {\n            category,\n            value: parseInt(value)\n          };\n        });\n        return items.reduce((acc, item) => {\n          acc[item.category] = (acc[item.category] || 0) + item.value;\n          return acc;\n        }, {});\n      } catch (e) {\n        return \"Please enter items as: A,10;B,20;A,30\";\n      }\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(FunctionCard, {\n    title: \"Array Functions\",\n    functions: arrayFunctions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_c = ArrayCard;\nexport default ArrayCard;\nvar _c;\n$RefreshReg$(_c, \"ArrayCard\");","map":{"version":3,"names":["React","FunctionCard","jsxDEV","_jsxDEV","ArrayCard","arrayFunctions","name","description","example","inputPlaceholder","tryIt","input","numbers","split","map","Number","num","e","filter","reduce","acc","curr","nestedArrays","sub","flatMap","subArr","x","arrStr","indexStr","arr","index","parseInt","slice","items","item","value","sort","a","b","category","title","functions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Academics/Programming/stdlib-showcase/react-stdlib-showcase/src/components/cards/ArrayCard.tsx"],"sourcesContent":["import React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\n\nconst ArrayCard: React.FC = () => {\n  const arrayFunctions = [\n    {\n      name: \"map()\",\n      description:\n        \"Creates a new array with the results of calling a function for every array element.\",\n      example: `const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\n// Result: [2, 4, 6, 8]`,\n      inputPlaceholder: \"Enter input array (e.g., 1,2,3,4)\",\n      tryIt: (input: string) => {\n        try {\n          const numbers = input.split(\",\").map(Number);\n          return numbers.map((num) => num * 2);\n        } catch (e) {\n          return \"Please enter numbers separated by commas (e.g., 1,2,3,4)\";\n        }\n      },\n    },\n    {\n      name: \"filter()\",\n      description: \"Creates a new array with elements that pass a test.\",\n      example: `const numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\n// Result: [2, 4, 6]`,\n      tryIt: (input: string) => {\n        try {\n          const numbers = input.split(\",\").map(Number);\n          return numbers.filter((num) => num % 2 === 0);\n        } catch (e) {\n          return \"Please enter numbers separated by commas (e.g., 1,2,3,4,5,6)\";\n        }\n      },\n    },\n    {\n      name: \"reduce()\",\n      description: \"Reduces an array to a single value (from left-to-right).\",\n      example: `const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\n// Result: 10`,\n      tryIt: (input: string) => {\n        try {\n          const numbers = input.split(\",\").map(Number);\n          return numbers.reduce((acc, curr) => acc + curr, 0);\n        } catch (e) {\n          return \"Please enter numbers separated by commas (e.g., 1,2,3,4)\";\n        }\n      },\n    },\n    {\n      name: \"flatMap() with Nested Arrays\",\n      description: \"Maps and flattens nested arrays in a single operation.\",\n      example: `const arr = [[1, 2], [3, 4], [5, 6]];\nconst result = arr.flatMap(subArr => subArr.map(x => x * 2));\n// Result: [2, 4, 6, 8, 10, 12]`,\n      inputPlaceholder: \"Enter nested arrays (e.g., 1,2;3,4;5,6)\",\n      tryIt: (input: string) => {\n        try {\n          const nestedArrays = input\n            .split(\";\")\n            .map((sub) => sub.split(\",\").map(Number));\n          return nestedArrays.flatMap((subArr) => subArr.map((x) => x * 2));\n        } catch (e) {\n          return \"Please enter numbers in format: 1,2;3,4;5,6\";\n        }\n      },\n    },\n    {\n      name: \"slice() with Negative Indices\",\n      description:\n        \"Extracts array portions using negative indices for end-based selection.\",\n      example: `const arr = [1, 2, 3, 4, 5];\nconst last3 = arr.slice(-3);\n// Result: [3, 4, 5]`,\n      inputPlaceholder: \"Enter array and start index (e.g., 1,2,3,4,5;-3)\",\n      tryIt: (input: string) => {\n        try {\n          const [arrStr, indexStr] = input.split(\";\");\n          const arr = arrStr.split(\",\").map(Number);\n          const index = parseInt(indexStr);\n          return arr.slice(index);\n        } catch (e) {\n          return \"Please enter array and index: 1,2,3,4,5;-3\";\n        }\n      },\n    },\n    {\n      name: \"Advanced Sort\",\n      description:\n        \"Sorts arrays with custom comparison function for complex objects.\",\n      example: `const items = [{name: 'A', value: 2}, {name: 'B', value: 1}];\nitems.sort((a, b) => a.value - b.value);\n// Result: [{name: 'B', value: 1}, {name: 'A', value: 2}]`,\n      inputPlaceholder: \"Enter name,value pairs (e.g., A,2;B,1;C,3)\",\n      tryIt: (input: string) => {\n        try {\n          const items = input.split(\";\").map((item) => {\n            const [name, value] = item.split(\",\");\n            return { name, value: parseInt(value) };\n          });\n          return items.sort((a, b) => a.value - b.value);\n        } catch (e) {\n          return \"Please enter items as: A,2;B,1;C,3\";\n        }\n      },\n    },\n    {\n      name: \"Group By with reduce()\",\n      description: \"Groups array elements by a key using reduce.\",\n      example: `const items = [\n  {category: 'A', value: 10},\n  {category: 'B', value: 20},\n  {category: 'A', value: 30}\n];\nconst grouped = items.reduce((acc, item) => {\n  acc[item.category] = (acc[item.category] || 0) + item.value;\n  return acc;\n}, {});\n// Result: { A: 40, B: 20 }`,\n      inputPlaceholder: \"Enter category,value pairs (e.g., A,10;B,20;A,30)\",\n      tryIt: (input: string) => {\n        try {\n          const items = input.split(\";\").map((item) => {\n            const [category, value] = item.split(\",\");\n            return { category, value: parseInt(value) };\n          });\n          return items.reduce((acc: { [key: string]: number }, item) => {\n            acc[item.category] = (acc[item.category] || 0) + item.value;\n            return acc;\n          }, {});\n        } catch (e) {\n          return \"Please enter items as: A,10;B,20;A,30\";\n        }\n      },\n    },\n  ];\n\n  return <FunctionCard title=\"Array Functions\" functions={arrayFunctions} />;\n};\n\nexport default ArrayCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}