{"ast":null,"code":"var _jsxFileName = \"c:\\\\Academics\\\\Programming\\\\stdlib-showcase\\\\react-stdlib-showcase\\\\src\\\\components\\\\cards\\\\MathCard.tsx\";\nimport React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathCard = () => {\n  const mathFunctions = [{\n    name: \"Math.abs()\",\n    description: \"Returns the absolute value of a number.\",\n    example: `const num = -5;\nconst absolute = Math.abs(num);\n// Result: 5`,\n    inputPlaceholder: \"Enter a number (e.g., -5)\",\n    tryIt: input => {\n      try {\n        return Math.abs(Number(input));\n      } catch (e) {\n        return \"Please enter a valid number\";\n      }\n    }\n  }, {\n    name: \"Math.round()\",\n    description: \"Rounds a number to the nearest integer.\",\n    example: `const num = 5.6;\nconst rounded = Math.round(num);\n// Result: 6`,\n    inputPlaceholder: \"Enter a decimal number (e.g., 5.6)\",\n    tryIt: input => {\n      try {\n        return Math.round(Number(input));\n      } catch (e) {\n        return \"Please enter a valid decimal number\";\n      }\n    }\n  }, {\n    name: \"Math.pow()\",\n    description: \"Returns the base to the exponent power.\",\n    example: `const base = 2;\nconst exponent = 3;\nconst result = Math.pow(base, exponent);\n// Result: 8`,\n    inputPlaceholder: \"Enter base,exponent (e.g., 2,3)\",\n    tryIt: input => {\n      try {\n        const [base, exponent] = input.split(\",\").map(Number);\n        return Math.pow(base, exponent);\n      } catch (e) {\n        return \"Please enter base and exponent separated by comma\";\n      }\n    }\n  }, {\n    name: \"Complex Number Operations\",\n    description: \"Performs operations with complex numbers using real and imaginary parts\",\n    example: `const real1 = 3, imag1 = 2; // 3 + 2i\nconst real2 = 1, imag2 = 4; // 1 + 4i\n// Multiplication: (3 + 2i)(1 + 4i) = (3 - 8) + (8 + 2)i = -5 + 10i`,\n    inputPlaceholder: \"Enter two complex numbers (e.g., 3,2;1,4)\",\n    tryIt: input => {\n      try {\n        const [comp1, comp2] = input.split(\";\");\n        const [real1, imag1] = comp1.split(\",\").map(Number);\n        const [real2, imag2] = comp2.split(\",\").map(Number);\n        return {\n          multiply: {\n            real: real1 * real2 - imag1 * imag2,\n            imaginary: real1 * imag2 + imag1 * real2\n          }\n        };\n      } catch (e) {\n        return \"Please enter complex numbers as: real,imaginary;real,imaginary\";\n      }\n    }\n  }, {\n    name: \"Statistical Functions\",\n    description: \"Calculates mean, median, mode, and standard deviation\",\n    example: `const numbers = [1, 2, 2, 3, 4, 4, 4, 5];\n// Mean: 3.125\n// Median: 3.5\n// Mode: 4\n// StdDev: ~1.25`,\n    inputPlaceholder: \"Enter numbers (e.g., 1,2,2,3,4,4,4,5)\",\n    tryIt: input => {\n      try {\n        const numbers = input.split(\",\").map(Number);\n        const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n        const sorted = [...numbers].sort((a, b) => a - b);\n        const median = sorted.length % 2 === 0 ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2 : sorted[Math.floor(sorted.length / 2)];\n        const mode = numbers.reduce((acc, num) => {\n          acc[num] = (acc[num] || 0) + 1;\n          return acc;\n        }, {});\n        const modeValue = Object.entries(mode).reduce((a, b) => a[1] > b[1] ? a : b)[0];\n        const stdDev = Math.sqrt(numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0) / numbers.length);\n        return {\n          mean,\n          median,\n          mode: modeValue,\n          stdDev\n        };\n      } catch (e) {\n        return \"Please enter a valid list of numbers separated by commas\";\n      }\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(FunctionCard, {\n    title: \"Math Functions\",\n    functions: mathFunctions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, this);\n};\n_c = MathCard;\nexport default MathCard;\nvar _c;\n$RefreshReg$(_c, \"MathCard\");","map":{"version":3,"names":["React","FunctionCard","jsxDEV","_jsxDEV","MathCard","mathFunctions","name","description","example","inputPlaceholder","tryIt","input","Math","abs","Number","e","round","base","exponent","split","map","pow","comp1","comp2","real1","imag1","real2","imag2","multiply","real","imaginary","numbers","mean","reduce","a","b","length","sorted","sort","median","floor","mode","acc","num","modeValue","Object","entries","stdDev","sqrt","title","functions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Academics/Programming/stdlib-showcase/react-stdlib-showcase/src/components/cards/MathCard.tsx"],"sourcesContent":["import React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\n\nconst MathCard: React.FC = () => {\n  const mathFunctions = [\n    {\n      name: \"Math.abs()\",\n      description: \"Returns the absolute value of a number.\",\n      example: `const num = -5;\nconst absolute = Math.abs(num);\n// Result: 5`,\n      inputPlaceholder: \"Enter a number (e.g., -5)\",\n      tryIt: (input: string) => {\n        try {\n          return Math.abs(Number(input));\n        } catch (e) {\n          return \"Please enter a valid number\";\n        }\n      },\n    },\n    {\n      name: \"Math.round()\",\n      description: \"Rounds a number to the nearest integer.\",\n      example: `const num = 5.6;\nconst rounded = Math.round(num);\n// Result: 6`,\n      inputPlaceholder: \"Enter a decimal number (e.g., 5.6)\",\n      tryIt: (input: string) => {\n        try {\n          return Math.round(Number(input));\n        } catch (e) {\n          return \"Please enter a valid decimal number\";\n        }\n      },\n    },\n    {\n      name: \"Math.pow()\",\n      description: \"Returns the base to the exponent power.\",\n      example: `const base = 2;\nconst exponent = 3;\nconst result = Math.pow(base, exponent);\n// Result: 8`,\n      inputPlaceholder: \"Enter base,exponent (e.g., 2,3)\",\n      tryIt: (input: string) => {\n        try {\n          const [base, exponent] = input.split(\",\").map(Number);\n          return Math.pow(base, exponent);\n        } catch (e) {\n          return \"Please enter base and exponent separated by comma\";\n        }\n      },\n    },\n    {\n      name: \"Complex Number Operations\",\n      description:\n        \"Performs operations with complex numbers using real and imaginary parts\",\n      example: `const real1 = 3, imag1 = 2; // 3 + 2i\nconst real2 = 1, imag2 = 4; // 1 + 4i\n// Multiplication: (3 + 2i)(1 + 4i) = (3 - 8) + (8 + 2)i = -5 + 10i`,\n      inputPlaceholder: \"Enter two complex numbers (e.g., 3,2;1,4)\",\n      tryIt: (input: string) => {\n        try {\n          const [comp1, comp2] = input.split(\";\");\n          const [real1, imag1] = comp1.split(\",\").map(Number);\n          const [real2, imag2] = comp2.split(\",\").map(Number);\n\n          return {\n            multiply: {\n              real: real1 * real2 - imag1 * imag2,\n              imaginary: real1 * imag2 + imag1 * real2,\n            },\n          };\n        } catch (e) {\n          return \"Please enter complex numbers as: real,imaginary;real,imaginary\";\n        }\n      },\n    },\n    {\n      name: \"Statistical Functions\",\n      description: \"Calculates mean, median, mode, and standard deviation\",\n      example: `const numbers = [1, 2, 2, 3, 4, 4, 4, 5];\n// Mean: 3.125\n// Median: 3.5\n// Mode: 4\n// StdDev: ~1.25`,\n      inputPlaceholder: \"Enter numbers (e.g., 1,2,2,3,4,4,4,5)\",\n      tryIt: (input: string) => {\n        try {\n          const numbers = input.split(\",\").map(Number);\n          const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n          const sorted = [...numbers].sort((a, b) => a - b);\n          const median =\n            sorted.length % 2 === 0\n              ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n              : sorted[Math.floor(sorted.length / 2)];\n\n          const mode = numbers.reduce((acc, num) => {\n            acc[num] = (acc[num] || 0) + 1;\n            return acc;\n          }, {} as { [key: number]: number });\n\n          const modeValue = Object.entries(mode).reduce((a, b) =>\n            a[1] > b[1] ? a : b\n          )[0];\n\n          const stdDev = Math.sqrt(\n            numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0) /\n              numbers.length\n          );\n\n          return {\n            mean,\n            median,\n            mode: modeValue,\n            stdDev,\n          };\n        } catch (e) {\n          return \"Please enter a valid list of numbers separated by commas\";\n        }\n      },\n    },\n  ];\n\n  return <FunctionCard title=\"Math Functions\" functions={mathFunctions} />;\n};\n\nexport default MathCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}