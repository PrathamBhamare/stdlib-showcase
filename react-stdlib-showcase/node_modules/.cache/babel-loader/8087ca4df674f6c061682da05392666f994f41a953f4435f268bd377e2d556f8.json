{"ast":null,"code":"var _jsxFileName = \"c:\\\\Academics\\\\Programming\\\\stdlib-showcase\\\\react-stdlib-showcase\\\\src\\\\components\\\\cards\\\\DateCard.tsx\";\nimport React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateCard = () => {\n  const dateFunctions = [{\n    name: \"new Date()\",\n    description: \"Creates a new date object with the current date and time.\",\n    example: `const now = new Date();\nconsole.log(now);\n// Result: Current date and time`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n    tryIt: input => {\n      try {\n        const date = input ? new Date(input) : new Date();\n        return date.toString();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }, {\n    name: \"toLocaleDateString()\",\n    description: \"Returns a date as a string using locale conventions.\",\n    example: `const date = new Date();\nconst local = date.toLocaleDateString();\n// Result: \"4/8/2025\"`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08)\",\n    tryIt: input => {\n      try {\n        const date = new Date(input);\n        return date.toLocaleDateString();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }, {\n    name: \"getTime()\",\n    description: \"Returns the number of milliseconds since January 1, 1970.\",\n    example: `const date = new Date();\nconst timestamp = date.getTime();\n// Result: milliseconds since epoch`,\n    inputPlaceholder: \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n    tryIt: input => {\n      try {\n        const date = input ? new Date(input) : new Date();\n        return date.getTime();\n      } catch (e) {\n        return \"Please enter a valid date string\";\n      }\n    }\n  }, {\n    name: \"Date Arithmetic\",\n    description: \"Performs date arithmetic operations (add/subtract days, months, years).\",\n    example: `const date = new Date('2025-04-08');\ndate.setDate(date.getDate() + 5);  // Add 5 days\n// Result: \"2025-04-13\"`,\n    inputPlaceholder: \"Enter date,days (e.g., 2025-04-08,5)\",\n    tryIt: input => {\n      try {\n        const [dateStr, days] = input.split(\",\");\n        const date = new Date(dateStr);\n        date.setDate(date.getDate() + parseInt(days));\n        return date.toLocaleDateString();\n      } catch (e) {\n        return \"Please enter date and days to add/subtract (use negative for subtraction)\";\n      }\n    }\n  }, {\n    name: \"Date Difference\",\n    description: \"Calculates the difference between two dates in days.\",\n    example: `const date1 = new Date('2025-04-08');\nconst date2 = new Date('2025-05-08');\nconst diffTime = Math.abs(date2 - date1);\nconst diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n// Result: \"30 days\"`,\n    inputPlaceholder: \"Enter two dates (e.g., 2025-04-08,2025-05-08)\",\n    tryIt: input => {\n      try {\n        const [date1Str, date2Str] = input.split(\",\");\n        const date1 = new Date(date1Str);\n        const date2 = new Date(date2Str);\n        const diffTime = Math.abs(date2.getTime() - date1.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return `${diffDays} days`;\n      } catch (e) {\n        return \"Please enter two valid dates separated by comma\";\n      }\n    }\n  }, {\n    name: \"Date Format\",\n    description: \"Formats a date using various locale options.\",\n    example: `const date = new Date('2025-04-08');\nconst formatted = date.toLocaleDateString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n// Result: \"Tuesday, April 8, 2025\"`,\n    inputPlaceholder: \"Enter date (e.g., 2025-04-08)\",\n    tryIt: input => {\n      try {\n        const date = new Date(input);\n        return date.toLocaleDateString('en-US', {\n          weekday: 'long',\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          timeZoneName: 'short'\n        });\n      } catch (e) {\n        return \"Please enter a valid date\";\n      }\n    }\n  }, {\n    name: \"ISO Week Number\",\n    description: \"Gets the ISO week number for a given date.\",\n    example: `const date = new Date('2025-04-08');\nconst weekNum = getISOWeek(date);\n// Result: \"Week 15 of 2025\"`,\n    inputPlaceholder: \"Enter date (e.g., 2025-04-08)\",\n    tryIt: input => {\n      try {\n        const date = new Date(input);\n        const startDate = new Date(date.getFullYear(), 0, 1);\n        const days = Math.floor((date.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000));\n        const weekNumber = Math.ceil(days / 7);\n        return `Week ${weekNumber} of ${date.getFullYear()}`;\n      } catch (e) {\n        return \"Please enter a valid date\";\n      }\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(FunctionCard, {\n    title: \"Date Functions\",\n    functions: dateFunctions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 10\n  }, this);\n};\n_c = DateCard;\nexport default DateCard;\nvar _c;\n$RefreshReg$(_c, \"DateCard\");","map":{"version":3,"names":["React","FunctionCard","jsxDEV","_jsxDEV","DateCard","dateFunctions","name","description","example","inputPlaceholder","tryIt","input","date","Date","toString","e","toLocaleDateString","getTime","dateStr","days","split","setDate","getDate","parseInt","date1Str","date2Str","date1","date2","diffTime","Math","abs","diffDays","ceil","weekday","year","month","day","hour","minute","second","timeZoneName","startDate","getFullYear","floor","weekNumber","title","functions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Academics/Programming/stdlib-showcase/react-stdlib-showcase/src/components/cards/DateCard.tsx"],"sourcesContent":["import React from \"react\";\nimport FunctionCard from \"../FunctionCard\";\n\nconst DateCard: React.FC = () => {\n  const dateFunctions = [\n    {\n      name: \"new Date()\",\n      description: \"Creates a new date object with the current date and time.\",\n      example: `const now = new Date();\nconsole.log(now);\n// Result: Current date and time`,\n      inputPlaceholder:\n        \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n      tryIt: (input: string) => {\n        try {\n          const date = input ? new Date(input) : new Date();\n          return date.toString();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n    {\n      name: \"toLocaleDateString()\",\n      description: \"Returns a date as a string using locale conventions.\",\n      example: `const date = new Date();\nconst local = date.toLocaleDateString();\n// Result: \"4/8/2025\"`,\n      inputPlaceholder: \"Enter date string (e.g., 2025-04-08)\",\n      tryIt: (input: string) => {\n        try {\n          const date = new Date(input);\n          return date.toLocaleDateString();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n    {\n      name: \"getTime()\",\n      description: \"Returns the number of milliseconds since January 1, 1970.\",\n      example: `const date = new Date();\nconst timestamp = date.getTime();\n// Result: milliseconds since epoch`,\n      inputPlaceholder:\n        \"Enter date string (e.g., 2025-04-08) or leave empty for current date\",\n      tryIt: (input: string) => {\n        try {\n          const date = input ? new Date(input) : new Date();\n          return date.getTime();\n        } catch (e) {\n          return \"Please enter a valid date string\";\n        }\n      },\n    },\n    {\n      name: \"Date Arithmetic\",\n      description: \"Performs date arithmetic operations (add/subtract days, months, years).\",\n      example: `const date = new Date('2025-04-08');\ndate.setDate(date.getDate() + 5);  // Add 5 days\n// Result: \"2025-04-13\"`,\n      inputPlaceholder: \"Enter date,days (e.g., 2025-04-08,5)\",\n      tryIt: (input: string) => {\n        try {\n          const [dateStr, days] = input.split(\",\");\n          const date = new Date(dateStr);\n          date.setDate(date.getDate() + parseInt(days));\n          return date.toLocaleDateString();\n        } catch (e) {\n          return \"Please enter date and days to add/subtract (use negative for subtraction)\";\n        }\n      },\n    },\n    {\n      name: \"Date Difference\",\n      description: \"Calculates the difference between two dates in days.\",\n      example: `const date1 = new Date('2025-04-08');\nconst date2 = new Date('2025-05-08');\nconst diffTime = Math.abs(date2 - date1);\nconst diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n// Result: \"30 days\"`,\n      inputPlaceholder: \"Enter two dates (e.g., 2025-04-08,2025-05-08)\",\n      tryIt: (input: string) => {\n        try {\n          const [date1Str, date2Str] = input.split(\",\");\n          const date1 = new Date(date1Str);\n          const date2 = new Date(date2Str);\n          const diffTime = Math.abs(date2.getTime() - date1.getTime());\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          return `${diffDays} days`;\n        } catch (e) {\n          return \"Please enter two valid dates separated by comma\";\n        }\n      },\n    },\n    {\n      name: \"Date Format\",\n      description: \"Formats a date using various locale options.\",\n      example: `const date = new Date('2025-04-08');\nconst formatted = date.toLocaleDateString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n// Result: \"Tuesday, April 8, 2025\"`,\n      inputPlaceholder: \"Enter date (e.g., 2025-04-08)\",\n      tryIt: (input: string) => {\n        try {\n          const date = new Date(input);\n          return date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            timeZoneName: 'short'\n          });\n        } catch (e) {\n          return \"Please enter a valid date\";\n        }\n      },\n    },\n    {\n      name: \"ISO Week Number\",\n      description: \"Gets the ISO week number for a given date.\",\n      example: `const date = new Date('2025-04-08');\nconst weekNum = getISOWeek(date);\n// Result: \"Week 15 of 2025\"`,\n      inputPlaceholder: \"Enter date (e.g., 2025-04-08)\",\n      tryIt: (input: string) => {\n        try {\n          const date = new Date(input);\n          const startDate = new Date(date.getFullYear(), 0, 1);\n          const days = Math.floor((date.getTime() - startDate.getTime()) / \n              (24 * 60 * 60 * 1000));\n          const weekNumber = Math.ceil(days / 7);\n          return `Week ${weekNumber} of ${date.getFullYear()}`;\n        } catch (e) {\n          return \"Please enter a valid date\";\n        }\n      },\n    }\n  ];\n\n  return <FunctionCard title=\"Date Functions\" functions={dateFunctions} />;\n};\n\nexport default DateCard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMC,aAAa,GAAG,CACpB;IACEC,IAAI,EAAE,YAAY;IAClBC,WAAW,EAAE,2DAA2D;IACxEC,OAAO,EAAE;AACf;AACA,iCAAiC;IAC3BC,gBAAgB,EACd,sEAAsE;IACxEC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAGD,KAAK,GAAG,IAAIE,IAAI,CAACF,KAAK,CAAC,GAAG,IAAIE,IAAI,CAAC,CAAC;QACjD,OAAOD,IAAI,CAACE,QAAQ,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,sBAAsB;IAC5BC,WAAW,EAAE,sDAAsD;IACnEC,OAAO,EAAE;AACf;AACA,sBAAsB;IAChBC,gBAAgB,EAAE,sCAAsC;IACxDC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;QAC5B,OAAOC,IAAI,CAACI,kBAAkB,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOD,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE,2DAA2D;IACxEC,OAAO,EAAE;AACf;AACA,oCAAoC;IAC9BC,gBAAgB,EACd,sEAAsE;IACxEC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAGD,KAAK,GAAG,IAAIE,IAAI,CAACF,KAAK,CAAC,GAAG,IAAIE,IAAI,CAAC,CAAC;QACjD,OAAOD,IAAI,CAACK,OAAO,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOF,CAAC,EAAE;QACV,OAAO,kCAAkC;MAC3C;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,iBAAiB;IACvBC,WAAW,EAAE,yEAAyE;IACtFC,OAAO,EAAE;AACf;AACA,wBAAwB;IAClBC,gBAAgB,EAAE,sCAAsC;IACxDC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAM,CAACO,OAAO,EAAEC,IAAI,CAAC,GAAGR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC;QACxC,MAAMR,IAAI,GAAG,IAAIC,IAAI,CAACK,OAAO,CAAC;QAC9BN,IAAI,CAACS,OAAO,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,GAAGC,QAAQ,CAACJ,IAAI,CAAC,CAAC;QAC7C,OAAOP,IAAI,CAACI,kBAAkB,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOD,CAAC,EAAE;QACV,OAAO,2EAA2E;MACpF;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,iBAAiB;IACvBC,WAAW,EAAE,sDAAsD;IACnEC,OAAO,EAAE;AACf;AACA;AACA;AACA,qBAAqB;IACfC,gBAAgB,EAAE,+CAA+C;IACjEC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAM,CAACa,QAAQ,EAAEC,QAAQ,CAAC,GAAGd,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC;QAC7C,MAAMM,KAAK,GAAG,IAAIb,IAAI,CAACW,QAAQ,CAAC;QAChC,MAAMG,KAAK,GAAG,IAAId,IAAI,CAACY,QAAQ,CAAC;QAChC,MAAMG,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,CAACV,OAAO,CAAC,CAAC,GAAGS,KAAK,CAACT,OAAO,CAAC,CAAC,CAAC;QAC5D,MAAMc,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACJ,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC5D,OAAO,GAAGG,QAAQ,OAAO;MAC3B,CAAC,CAAC,OAAOhB,CAAC,EAAE;QACV,OAAO,iDAAiD;MAC1D;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,aAAa;IACnBC,WAAW,EAAE,8CAA8C;IAC3DC,OAAO,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;IAC9BC,gBAAgB,EAAE,+BAA+B;IACjDC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;QAC5B,OAAOC,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;UACtCiB,OAAO,EAAE,MAAM;UACfC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,MAAM;UACbC,GAAG,EAAE,SAAS;UACdC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE,SAAS;UACjBC,MAAM,EAAE,SAAS;UACjBC,YAAY,EAAE;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOzB,CAAC,EAAE;QACV,OAAO,2BAA2B;MACpC;IACF;EACF,CAAC,EACD;IACET,IAAI,EAAE,iBAAiB;IACvBC,WAAW,EAAE,4CAA4C;IACzDC,OAAO,EAAE;AACf;AACA,6BAA6B;IACvBC,gBAAgB,EAAE,+BAA+B;IACjDC,KAAK,EAAGC,KAAa,IAAK;MACxB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;QAC5B,MAAM8B,SAAS,GAAG,IAAI5B,IAAI,CAACD,IAAI,CAAC8B,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACpD,MAAMvB,IAAI,GAAGU,IAAI,CAACc,KAAK,CAAC,CAAC/B,IAAI,CAACK,OAAO,CAAC,CAAC,GAAGwB,SAAS,CAACxB,OAAO,CAAC,CAAC,KACxD,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1B,MAAM2B,UAAU,GAAGf,IAAI,CAACG,IAAI,CAACb,IAAI,GAAG,CAAC,CAAC;QACtC,OAAO,QAAQyB,UAAU,OAAOhC,IAAI,CAAC8B,WAAW,CAAC,CAAC,EAAE;MACtD,CAAC,CAAC,OAAO3B,CAAC,EAAE;QACV,OAAO,2BAA2B;MACpC;IACF;EACF,CAAC,CACF;EAED,oBAAOZ,OAAA,CAACF,YAAY;IAAC4C,KAAK,EAAC,gBAAgB;IAACC,SAAS,EAAEzC;EAAc;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAACC,EAAA,GAjJI/C,QAAkB;AAmJxB,eAAeA,QAAQ;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}